import { getStaticPathForStudents, getStudent } from '../../../utils/student-utils';
import React, { useState } from 'react'
import { Button, Input, Form } from 'semantic-ui-react'
import styles from '../../../styles/Home.module.css'
import Head from 'next/head'
import Router from 'next/router';
import axios from 'axios';
import { clientRequestBaseUrl, requestConfig } from '../../../utils/globals';
import { formatDateStringFromMs } from '../../../utils/date-utils';


export async function getStaticProps({ params }) {
    const studentID = params.id
    const student = await getStudent(studentID, false);

    return {
        props: {
            ...student
        }
    }
}

export async function getStaticPaths() {
    const paths = await getStaticPathForStudents();

    return {
        paths,
        fallback: false
    }
}

export default function EditStudent({ student_id, name, phone_number, address, date_of_birth }) {
    const [Name, setName] = useState(name)
    const [phoneNumber, setPhoneNumber] = useState(phone_number)
    const [Address, setAddress] = useState(address)
    const [dateOfBirth, setDateOfBirth] = useState(date_of_birth)


    async function updateAsStudent() {
        if (Name != '' && phoneNumber != '' && Address != '' && dateOfBirth != '') {
            var body = {
                "student_id": student_id,
                "name": Name,
                "phone_number": phoneNumber,
                "address": Address,
                "date_of_birth": dateOfBirth,
            }
            try {
                let response = await axios.put(`${clientRequestBaseUrl}/students/${student_id}`, body, requestConfig);

                if (response.status == 202) {
                    console.log(response.data)
                    Router.push(`/student/${student_id}`)
                } else {
                    alert(response.data)
                }
            } catch (err) {
                alert(err)
            }
        }
    }

    function backToStudentHome() {
        Router.push(`/student/${student_id}`)
    }

    return (
        <div className={styles.container}>
            <Head>
                <title>Edit Student Particulars</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <h1 className={styles.title}>
                Edit Student Particulars
            </h1>

            <br />

            <Form>
                <Form.Group widths='equal'>
                    <Form.Field>
                        <label>Name</label>
                        <Input value={Name} onChange={e => setName(e.target.value)} maxLength="30" fluid placeholder='Name' />
                    </Form.Field>
                    <Form.Field>
                        <label>Phone Number</label>
                        <Input value={phoneNumber} onChange={e => setPhoneNumber(e.target.value)} maxLength="30" fluid placeholder='PhoneNumber' />
                    </Form.Field>
                </Form.Group>

                <Form.Group widths='equal'>
                    <Form.Field>
                        <label>Address</label>
                        <Input value={Address} onChange={e => setAddress(e.target.value)} maxLength="100" fluid placeholder='Address' />
                    </Form.Field>
                    <Form.Field>
                        <label>Date of Birth</label>
                        <Input value={formatDateStringFromMs(parseInt(dateOfBirth))} onChange={e => setDateOfBirth(e.target.valueAsNumber.toString())} type="date" maxLength="30" fluid placeholder='Date of Birth' min="1990-01-01" max={formatDateStringFromMs(new Date().getTime())} />
                    </Form.Field>
                </Form.Group>

                <Button onClick={updateAsStudent} type='submit'>Submit</Button>
            </Form>

            <br />
            <Button primary onClick={backToStudentHome} type='submit'>Back To Home</Button>
        </div>
    )
}